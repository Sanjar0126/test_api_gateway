definitions:
  models.BotLanguageModel:
    properties:
      lang:
        type: string
    type: object
  models.CheckPointInsideGeozoneResponse:
    properties:
      result:
        type: boolean
    type: object
  models.ChildCategoryModel:
    properties:
      description:
        type: string
      description_v2:
        $ref: '#/definitions/models.Language'
      id:
        type: string
      image:
        type: string
      name:
        type: string
      order_no:
        example: "0"
        type: string
      parent_id:
        type: string
      products:
        items:
          $ref: '#/definitions/models.GetProductModel'
        type: array
      slug:
        type: string
      title:
        $ref: '#/definitions/models.Language'
    type: object
  models.ComputeDeliveryPriceRequestModel:
    properties:
      branch_id:
        type: string
      lat:
        type: number
      long:
        type: number
    type: object
  models.ComputeDeliveryPriceResponseModel:
    properties:
      distance:
        type: number
      price:
        type: number
    type: object
  models.ConfirmCustomerLoginRequest:
    properties:
      bot_language:
        type: string
      code:
        type: string
      fcm_token:
        type: string
      phone:
        type: string
      tg_chat_id:
        type: string
    type: object
  models.CourierModel:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      vehicle_number:
        type: string
    type: object
  models.CreateGeozoneModel:
    properties:
      name:
        type: string
      points:
        items:
          $ref: '#/definitions/models.Point'
        type: array
    type: object
  models.CreateOnDemandOrderModel:
    properties:
      apartment:
        type: string
      building:
        type: string
      client_id:
        type: string
      co_delivery_price:
        example: 10000
        type: number
      delivery_time:
        type: string
      delivery_type:
        example: delivery
        type: string
      description:
        type: string
      extra_phone_number:
        type: string
      floor:
        type: string
      paid:
        type: boolean
      payment_type:
        type: string
      source:
        type: string
      status_id:
        type: string
      steps:
        items:
          properties:
            branch_id:
              type: string
            description:
              type: string
            products:
              items:
                $ref: '#/definitions/models.productOnDemandModel'
              type: array
          type: object
        type: array
      to_address:
        example: Hamid Olimjon maydoni 10A dom 40-kvartira
        type: string
      to_location:
        $ref: '#/definitions/models.Location'
    type: object
  models.CreateOnDemandOrderModelResponse:
    properties:
      external_order_id:
        type: string
      order_id:
        type: string
      payment_link:
        type: string
    type: object
  models.CreateUserReviewsModel:
    properties:
      branch_id:
        type: string
      branch_name:
        type: string
      client_id:
        type: string
      client_name:
        type: string
      client_phone:
        type: string
      courier_id:
        type: string
      courier_name:
        type: string
      created_at:
        type: string
      delivery_time:
        type: integer
      id:
        type: string
      lang:
        type: string
      operator_id:
        type: string
      operator_name:
        type: string
      order_num:
        type: string
      related_subject:
        type: string
      review_id:
        type: string
      review_message:
        type: string
      type:
        type: string
    type: object
  models.CustomerAddress:
    properties:
      address:
        type: string
      apartment:
        type: string
      building:
        type: string
      extra_phone_number:
        type: string
      floor:
        type: string
      location:
        $ref: '#/definitions/models.Location'
    type: object
  models.CustomerAddressesModel:
    properties:
      addresses:
        items:
          $ref: '#/definitions/models.CustomerAddress'
        type: array
    type: object
  models.CustomerLoginRequest:
    properties:
      phone:
        type: string
      tag:
        type: string
    type: object
  models.DeliveryPriceModel:
    properties:
      price:
        type: number
    type: object
  models.GenerateLinkRequestModel:
    properties:
      amount:
        type: integer
      order_num:
        type: integer
    type: object
  models.GenerateLinkResponseModel:
    properties:
      link:
        type: string
    type: object
  models.GetAllBranchesModel:
    properties:
      branches:
        items:
          $ref: '#/definitions/models.GetBranchModel'
        type: array
      count:
        type: integer
    type: object
  models.GetAllCategoriesModel:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.GetCategoryModel'
        type: array
      count:
        example: "0"
        type: string
    type: object
  models.GetAllGeozonesModel:
    properties:
      count:
        type: integer
      geozones:
        items:
          $ref: '#/definitions/models.GetGeozoneModel'
        type: array
    type: object
  models.GetAllOrderModel:
    properties:
      count:
        example: "0"
        type: string
      orders:
        items:
          properties:
            apartment:
              type: string
            building:
              type: string
            client_id:
              type: string
            client_name:
              example: Oybek
              type: string
            client_phone_number:
              example: "998998765432"
              type: string
            co_delivery_price:
              example: 10000
              type: number
            courier:
              $ref: '#/definitions/models.CourierModel'
            courier_id:
              type: string
            created_at:
              type: string
            delivery_time:
              example: "12:00"
              type: string
            delivery_type:
              example: delivery
              type: string
            description:
              type: string
            external_order_id:
              type: string
            extra_phone_number:
              type: string
            finished_at:
              type: string
            floor:
              type: string
            id:
              type: string
            order_amount:
              type: integer
            paid:
              type: boolean
            payment_type:
              type: string
            rating:
              type: string
            review:
              type: string
            source:
              type: string
            status_id:
              type: string
            status_notes:
              items:
                $ref: '#/definitions/models.StatusNote'
              type: array
            steps:
              items:
                $ref: '#/definitions/models.stepDemandModel'
              type: array
            to_address:
              example: Hamid Olimjon maydoni 10A dom 40-kvartira
              type: string
            to_location:
              $ref: '#/definitions/models.Location'
          type: object
        type: array
    type: object
  models.GetAllProductsModel:
    properties:
      count:
        example: "0"
        type: string
      products:
        items:
          $ref: '#/definitions/models.GetProductModel'
        type: array
    type: object
  models.GetAllPromosModel:
    properties:
      count:
        type: integer
      promos:
        items:
          $ref: '#/definitions/models.GetPromoModel'
        type: array
    type: object
  models.GetAllReviewsModel:
    properties:
      count:
        type: integer
      reviews:
        items:
          $ref: '#/definitions/models.GetReviewModel'
        type: array
    type: object
  models.GetBannerModel:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      id:
        type: string
      image:
        type: string
      position:
        type: string
      shipper_id:
        type: string
      title:
        $ref: '#/definitions/models.Language'
      updated_at:
        type: string
      url:
        type: string
    type: object
  models.GetBranchModel:
    properties:
      address:
        type: string
      created_at:
        type: string
      destination:
        type: string
      id:
        type: string
      image:
        type: string
      is_active:
        type: boolean
      location:
        $ref: '#/definitions/models.Location'
      name:
        type: string
      phone:
        type: string
      shipper_id:
        type: string
      work_hours:
        example: 9am-10pm
        type: string
    type: object
  models.GetCategoryModel:
    properties:
      child_categories:
        items:
          $ref: '#/definitions/models.ChildCategoryModel'
        type: array
      description:
        type: string
      description_v2:
        $ref: '#/definitions/models.Language'
      id:
        type: string
      image:
        type: string
      name:
        type: string
      order_no:
        example: "0"
        type: string
      parent_id:
        type: string
      products:
        items:
          $ref: '#/definitions/models.GetProductModel'
        type: array
      slug:
        type: string
      title:
        $ref: '#/definitions/models.Language'
    type: object
  models.GetCustomerModel:
    properties:
      created_at:
        type: string
      date_of_birth:
        type: string
      fcm_token:
        type: string
      id:
        type: string
      is_blocked:
        type: boolean
      name:
        type: string
      phone:
        type: string
      tg_chat_id:
        type: string
    type: object
  models.GetGeozoneModel:
    properties:
      id:
        type: string
      name:
        type: string
      points:
        items:
          $ref: '#/definitions/models.Point'
        type: array
    type: object
  models.GetOrderModel:
    properties:
      apartment:
        type: string
      building:
        type: string
      client_id:
        type: string
      client_name:
        example: Oybek
        type: string
      client_phone_number:
        example: "998998765432"
        type: string
      co_delivery_price:
        example: 10000
        type: number
      courier:
        $ref: '#/definitions/models.CourierModel'
      courier_id:
        type: string
      created_at:
        type: string
      delivery_time:
        example: "12:00"
        type: string
      delivery_type:
        example: delivery
        type: string
      description:
        type: string
      external_order_id:
        type: string
      extra_phone_number:
        type: string
      finished_at:
        type: string
      floor:
        type: string
      id:
        type: string
      order_amount:
        example: "0"
        type: string
      paid:
        type: boolean
      payment_type:
        type: string
      rating:
        type: string
      review:
        type: string
      shipper_user:
        items:
          properties:
            id:
              type: string
            name:
              type: string
            phone:
              type: string
          type: object
        type: array
      source:
        type: string
      status_id:
        type: string
      status_notes:
        items:
          $ref: '#/definitions/models.StatusNote'
        type: array
      steps:
        items:
          properties:
            address:
              type: string
            branch_id:
              type: string
            branch_name:
              type: string
            description:
              type: string
            destination_address:
              type: string
            external_step_id:
              example: "0"
              type: string
            id:
              type: string
            location:
              $ref: '#/definitions/models.Location'
            phone_number:
              type: string
            products:
              items:
                properties:
                  description:
                    type: string
                  external_product_id:
                    example: "1234"
                    type: string
                  id:
                    type: string
                  name:
                    example: Choyxona Osh
                    type: string
                  price:
                    example: 25000
                    type: number
                  product_id:
                    type: string
                  quantity:
                    example: 2
                    type: number
                  total_amount:
                    example: "0"
                    type: string
                type: object
              type: array
            status:
              type: string
            step_amount:
              example: "0"
              type: string
          type: object
        type: array
      to_address:
        example: Hamid Olimjon maydoni 10A dom 40-kvartira
        type: string
      to_location:
        $ref: '#/definitions/models.Location'
    type: object
  models.GetProductModel:
    properties:
      category_id:
        type: string
      description:
        type: string
      description_v2:
        $ref: '#/definitions/models.Language'
      id:
        type: string
      image:
        type: string
      name:
        type: string
      order_no:
        example: "0"
        type: string
      price:
        example: "0"
        type: string
      slug:
        type: string
      title:
        $ref: '#/definitions/models.Language'
    type: object
  models.GetPromoModel:
    properties:
      created_at:
        type: string
      description:
        $ref: '#/definitions/models.Language'
      end_time:
        type: string
      image:
        type: string
      is_active:
        type: boolean
      start_time:
        type: string
      title:
        $ref: '#/definitions/models.Language'
    type: object
  models.GetReviewModel:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      id:
        type: string
      message:
        $ref: '#/definitions/models.Language'
      related_subject:
        type: string
      shipper_id:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.GetShipperModel:
    properties:
      call_center_tg:
        example: '@admin'
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      logo:
        type: string
      manu_image:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        items:
          type: string
        type: array
      username:
        type: string
      work_hour_end:
        example: "00:00"
        type: string
      work_hour_start:
        example: "05:00"
        type: string
    type: object
  models.GetStatuses:
    properties:
      statuses:
        items:
          $ref: '#/definitions/models.Status'
        type: array
    type: object
  models.Language:
    properties:
      en:
        type: string
      ru:
        type: string
      uz:
        type: string
    type: object
  models.Location:
    properties:
      lat:
        example: 40.123
        type: number
      long:
        example: 60.123
        type: number
    type: object
  models.OrderReview:
    properties:
      rating:
        type: integer
      review:
        type: string
    type: object
  models.Point:
    properties:
      lat:
        type: number
      lon:
        type: number
    type: object
  models.PushTelegramModel:
    properties:
      animation:
        type: string
      file:
        type: string
      photo:
        type: string
      text:
        type: string
      video:
        type: string
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    type: object
  models.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.RegisterConfirmModel:
    properties:
      bot_language:
        type: string
      code:
        type: string
      fcm_token:
        type: string
      phone:
        type: string
      tg_chat_id:
        type: string
    type: object
  models.RegisterModel:
    properties:
      name:
        type: string
      phone:
        type: string
    type: object
  models.Response:
    properties:
      id:
        type: object
    type: object
  models.ResponseError:
    properties:
      error:
        type: object
    type: object
  models.ResponseOK:
    properties:
      message:
        type: object
    type: object
  models.Status:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  models.StatusNote:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      status_id:
        type: string
    type: object
  models.UpdateCustomerModel:
    properties:
      date_of_birth:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  models.UpdateGeozoneModel:
    properties:
      name:
        type: string
      points:
        items:
          $ref: '#/definitions/models.Point'
        type: array
    type: object
  models.UpdateOrderReview:
    properties:
      seen:
        type: boolean
      user_id:
        type: string
    type: object
  models.productOnDemandModel:
    properties:
      description:
        type: string
      price:
        example: "50000"
        type: string
      product_id:
        example: a010f178-da52-4373-aacd-e477d871e27a
        type: string
      quantity:
        example: 5
        type: number
    type: object
  models.stepDemandModel:
    properties:
      address:
        type: string
      branch_id:
        type: string
      branch_name:
        type: string
      description:
        type: string
      destination_address:
        type: string
      external_step_id:
        example: "0"
        type: string
      location:
        $ref: '#/definitions/models.Location'
      phone_number:
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/banner:
    get:
      consumes:
      - application/json
      description: API for getting all banners
      parameters:
      - description: Shipper
        in: header
        name: Shipper
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllPromosModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get All banners
      tags:
      - banner
  /v1/banner/{banner_id}:
    get:
      consumes:
      - application/json
      description: API for getting banner
      parameters:
      - description: banner_id
        in: path
        name: banner_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetBannerModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get banner
      tags:
      - banner
  /v1/branches:
    get:
      consumes:
      - application/json
      description: API for getting branches
      parameters:
      - description: Shipper
        in: header
        name: Shipper
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllBranchesModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get All Branches
      tags:
      - branch
  /v1/branches/{branch_id}:
    get:
      consumes:
      - application/json
      description: API for getting branch info
      parameters:
      - description: branch_id
        in: path
        name: branch_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetBranchModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Branch
      tags:
      - branch
  /v1/category:
    get:
      consumes:
      - application/json
      description: API for getting all category
      parameters:
      - description: Shipper
        in: header
        name: Shipper
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: parent_id
        in: query
        name: parent_id
        type: integer
      - description: search
        in: query
        name: search
        type: string
      - description: all
        in: query
        name: all
        type: boolean
      - description: with_products
        in: query
        name: with_products
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllCategoriesModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get All Category
      tags:
      - category
  /v1/category/{category_id}:
    get:
      consumes:
      - application/json
      description: API for getting a category
      parameters:
      - description: Shipper
        in: header
        name: Shipper
        type: string
      - description: category_id
        in: path
        name: category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetCategoryModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Category
      tags:
      - category
  /v1/check-point-geozone:
    get:
      consumes:
      - application/json
      description: API for checking if point inside geozone
      parameters:
      - description: lat
        in: query
        name: lat
        required: true
        type: number
      - description: lon
        in: query
        name: lon
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CheckPointInsideGeozoneResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Check if point inside geozone
      tags:
      - geozone
  /v1/customer-addresses/{phone}:
    get:
      consumes:
      - application/json
      description: API for taking all order addresses
      parameters:
      - description: phone
        in: path
        name: phone
        required: true
        type: string
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CustomerAddressesModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Customer Order Addresses
      tags:
      - customer
  /v1/customer-profile:
    get:
      consumes:
      - application/json
      description: Customer profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetCustomerModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Customer Profile Information
      tags:
      - customer
  /v1/customer/bot-language:
    put:
      consumes:
      - application/json
      description: API for updating customer
      parameters:
      - description: lang
        in: body
        name: lang
        required: true
        schema:
          $ref: '#/definitions/models.BotLanguageModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetCustomerModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: AttachBotLanguage
      tags:
      - customer
  /v1/customers/{customer_id}:
    delete:
      consumes:
      - application/json
      description: API for deleting customer
      parameters:
      - description: customer_id
        in: path
        name: customer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOK'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete Customer
      tags:
      - customer
    get:
      consumes:
      - application/json
      description: API for getting customer info
      parameters:
      - description: customer_id
        in: path
        name: customer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetCustomerModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Customer
      tags:
      - customer
    put:
      consumes:
      - application/json
      description: API for updating customer
      parameters:
      - description: customer_id
        in: path
        name: customer_id
        required: true
        type: string
      - description: customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCustomerModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetCustomerModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update Customer
      tags:
      - customer
  /v1/customers/{customer_id}/last-order:
    get:
      consumes:
      - application/json
      description: API for getting customer last order
      parameters:
      - description: customer_id
        in: path
        name: customer_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetOrderModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Customer Last Order
      tags:
      - customer
  /v1/customers/{customer_id}/orders:
    get:
      consumes:
      - application/json
      description: API for getting customer orders
      parameters:
      - description: customer_id
        in: path
        name: customer_id
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: status_ids
        in: query
        items:
          type: string
        name: status_ids
        type: array
      - description: start_date
        in: query
        name: start_date
        type: string
      - description: end_date
        in: query
        name: end_date
        type: string
      - description: review_seen
        in: query
        name: review_seen
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllOrderModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Customer Orders
      tags:
      - customer
  /v1/customers/confirm-login:
    post:
      consumes:
      - application/json
      description: API that confirms sms code
      parameters:
      - description: Shipper
        in: header
        name: Shipper
        required: true
        type: string
      - description: Platform
        in: header
        name: Platform
        required: true
        type: string
      - description: confirm login
        in: body
        name: confirm_phone
        required: true
        schema:
          $ref: '#/definitions/models.ConfirmCustomerLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetCustomerModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Confirm Customer Login
      tags:
      - customer
  /v1/customers/login:
    post:
      consumes:
      - application/json
      description: |-
        API that checks whether customer exists
        and if exists sends sms to their number
      parameters:
      - description: Shipper
        in: header
        name: Shipper
        required: true
        type: string
      - description: login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.CustomerLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOK'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Customer Login
      tags:
      - customer
  /v1/customers/phone:
    post:
      consumes:
      - application/json
      description: API for getting customer by phone
      parameters:
      - description: Shipper
        in: header
        name: Shipper
        required: true
        type: string
      - description: login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.CustomerLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetCustomerModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get Customer By Phone
      tags:
      - customer
  /v1/customers/refresh-token:
    post:
      consumes:
      - application/json
      description: Customer refresh token
      parameters:
      - description: refresh-token
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Customer Refresh Token
      tags:
      - customer
  /v1/customers/register:
    post:
      consumes:
      - application/json
      description: Register - API for registering customers
      parameters:
      - description: Shipper
        in: header
        name: Shipper
        required: true
        type: string
      - description: register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/models.RegisterModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOK'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Register
      tags:
      - customer
  /v1/customers/register-confirm:
    post:
      consumes:
      - application/json
      description: Register - API for confirming and inserting user to DB
      parameters:
      - description: Shipper
        in: header
        name: Shipper
        required: true
        type: string
      - description: Platform
        in: header
        name: Platform
        required: true
        type: string
      - description: register_confirm
        in: body
        name: register_confirm
        required: true
        schema:
          $ref: '#/definitions/models.RegisterConfirmModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetCustomerModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Register confirm
      tags:
      - customer
  /v1/customers/update-tg-chat-id:
    patch:
      consumes:
      - application/json
      description: Tg chat id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOK'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Tg chat id
      tags:
      - tg chat id
  /v1/delivery-price:
    get:
      consumes:
      - application/json
      description: API for getting delivery price for shipper
      parameters:
      - description: Shipper
        in: header
        name: Shipper
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeliveryPriceModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get Delivery Price
      tags:
      - fare
  /v1/fares/compute-price:
    patch:
      consumes:
      - application/json
      description: API for computing delivery price
      parameters:
      - description: price
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/models.ComputeDeliveryPriceRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ComputeDeliveryPriceResponseModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Compute Delivery Price
      tags:
      - fare
  /v1/geozones:
    get:
      consumes:
      - application/json
      description: API for getting geozones
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllGeozonesModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Geozones
      tags:
      - geozone
    post:
      consumes:
      - application/json
      description: API for creating geozone
      parameters:
      - description: geozone
        in: body
        name: geozone
        required: true
        schema:
          $ref: '#/definitions/models.CreateGeozoneModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetGeozoneModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create Gezone
      tags:
      - geozone
  /v1/geozones/{geozone_id}:
    delete:
      consumes:
      - application/json
      description: API for deleting geozone
      parameters:
      - description: geozone_id
        in: path
        name: geozone_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOK'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete Geozone
      tags:
      - geozone
    get:
      consumes:
      - application/json
      description: API for getting geozone
      parameters:
      - description: geozone_id
        in: path
        name: geozone_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetGeozoneModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Geozone
      tags:
      - geozone
    put:
      consumes:
      - application/json
      description: API for updating geozone
      parameters:
      - description: geozone_id
        in: path
        name: geozone_id
        required: true
        type: string
      - description: geozone
        in: body
        name: geozone
        required: true
        schema:
          $ref: '#/definitions/models.UpdateGeozoneModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOK'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update Geozone
      tags:
      - geozone
  /v1/nearest-branch:
    get:
      consumes:
      - application/json
      description: API for getting branch info
      parameters:
      - description: long
        in: query
        name: long
        type: string
      - description: lat
        in: query
        name: lat
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetBranchModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Nearest Branch
      tags:
      - branch
  /v1/ondemand-order:
    post:
      consumes:
      - application/json
      description: API for creating on demand order
      parameters:
      - description: order
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.CreateOnDemandOrderModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateOnDemandOrderModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create On Demand Order
      tags:
      - order
  /v1/order:
    get:
      consumes:
      - application/json
      description: API for getting customer orders
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: status_ids
        in: query
        items:
          type: string
        name: status_ids
        type: array
      - description: start_date
        in: query
        name: start_date
        type: string
      - description: end_date
        in: query
        name: end_date
        type: string
      - description: review_seen
        in: query
        name: review_seen
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllOrderModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Customer Orders
      tags:
      - order
  /v1/order-review/{order_id}:
    put:
      consumes:
      - application/json
      description: API for updating order review seen
      parameters:
      - description: order_id
        in: path
        name: order_id
        required: true
        type: string
      - description: order_review
        in: body
        name: order_review
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOrderReview'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdateOrderReview'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Update Order Review Seen
      tags:
      - order
  /v1/order-statuses:
    get:
      consumes:
      - application/json
      description: API for getting order statuses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetStatuses'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get All Possible Order Statuses
      tags:
      - order
  /v1/order/{order_id}:
    get:
      consumes:
      - application/json
      description: API for getting order
      parameters:
      - description: order_id
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetOrderModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get Order
      tags:
      - order
  /v1/order/{order_id}/review:
    patch:
      consumes:
      - application/json
      description: API for creating review for order
      parameters:
      - description: order_id
        in: path
        name: order_id
        required: true
        type: string
      - description: order_review
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.OrderReview'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOK'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create Review For An Order
      tags:
      - order
  /v1/payment/click-link:
    post:
      consumes:
      - application/json
      description: API for generating click link
      parameters:
      - description: generate-link
        in: body
        name: generate-link
        required: true
        schema:
          $ref: '#/definitions/models.GenerateLinkRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenerateLinkResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Generate click link
      tags:
      - payment
  /v1/payment/payme-link:
    post:
      consumes:
      - application/json
      description: API for generating payme link
      parameters:
      - description: generate-link
        in: body
        name: generate-link
        required: true
        schema:
          $ref: '#/definitions/models.GenerateLinkRequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenerateLinkResponseModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Generate payme link
      tags:
      - payment
  /v1/product:
    get:
      consumes:
      - application/json
      description: API for getting all product
      parameters:
      - description: Shipper
        in: header
        name: Shipper
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: category_id
        in: query
        name: category_id
        type: string
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllProductsModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get All Product
      tags:
      - product
  /v1/product/{product_id}:
    get:
      consumes:
      - application/json
      description: API for getting a product
      parameters:
      - description: Shipper
        in: header
        name: Shipper
        required: true
        type: string
      - description: product_id
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetProductModel'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get Product
      tags:
      - product
  /v1/promo:
    get:
      consumes:
      - application/json
      description: API for getting promo
      parameters:
      - description: Shipper
        in: header
        name: Shipper
        required: true
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllPromosModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get All promos
      tags:
      - promo
  /v1/promo/{promo_id}:
    get:
      consumes:
      - application/json
      description: API for getting promo
      parameters:
      - description: promo_id
        in: path
        name: promo_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetPromoModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get promo
      tags:
      - promo
  /v1/review:
    get:
      consumes:
      - application/json
      description: API for getting review
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllReviewsModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get All reviews
      tags:
      - review
  /v1/review/{review_id}:
    get:
      consumes:
      - application/json
      description: API for getting review
      parameters:
      - description: review_id
        in: path
        name: review_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get review
      tags:
      - review
  /v1/shippers/{shipper_id}:
    get:
      consumes:
      - application/json
      description: API for getting shipper info
      parameters:
      - description: shipper_id
        in: path
        name: shipper_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetShipperModel'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Get Shipper
      tags:
      - shipper
  /v1/telegram:
    post:
      consumes:
      - application/json
      description: API for pushing to telegram users
      parameters:
      - description: pushtelegram
        in: body
        name: pushtelegram
        required: true
        schema:
          $ref: '#/definitions/models.PushTelegramModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOK'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Push Telegram shipper users
      tags:
      - telegram
  /v1/user_reviews:
    post:
      consumes:
      - application/json
      description: API for creating UserReviews
      parameters:
      - description: userReviews
        in: body
        name: userReviews
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserReviewsModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create UserReviews
      tags:
      - UserReviews
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
