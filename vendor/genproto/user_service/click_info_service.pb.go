// Code generated by protoc-gen-go. DO NOT EDIT.
// source: click_info_service.proto

package user_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetAllClickInfoRequest struct {
	ShipperId            string   `protobuf:"bytes,1,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
	Search               string   `protobuf:"bytes,2,opt,name=search,proto3" json:"search,omitempty"`
	Page                 uint64   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint64   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllClickInfoRequest) Reset()         { *m = GetAllClickInfoRequest{} }
func (m *GetAllClickInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllClickInfoRequest) ProtoMessage()    {}
func (*GetAllClickInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d26b878620e488b, []int{0}
}

func (m *GetAllClickInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllClickInfoRequest.Unmarshal(m, b)
}
func (m *GetAllClickInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllClickInfoRequest.Marshal(b, m, deterministic)
}
func (m *GetAllClickInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllClickInfoRequest.Merge(m, src)
}
func (m *GetAllClickInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllClickInfoRequest.Size(m)
}
func (m *GetAllClickInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllClickInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllClickInfoRequest proto.InternalMessageInfo

func (m *GetAllClickInfoRequest) GetShipperId() string {
	if m != nil {
		return m.ShipperId
	}
	return ""
}

func (m *GetAllClickInfoRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *GetAllClickInfoRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllClickInfoRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetAllClickInfoResponse struct {
	ClickInfos           []*Click `protobuf:"bytes,1,rep,name=click_infos,json=clickInfos,proto3" json:"click_infos,omitempty"`
	Count                uint64   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllClickInfoResponse) Reset()         { *m = GetAllClickInfoResponse{} }
func (m *GetAllClickInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllClickInfoResponse) ProtoMessage()    {}
func (*GetAllClickInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d26b878620e488b, []int{1}
}

func (m *GetAllClickInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllClickInfoResponse.Unmarshal(m, b)
}
func (m *GetAllClickInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllClickInfoResponse.Marshal(b, m, deterministic)
}
func (m *GetAllClickInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllClickInfoResponse.Merge(m, src)
}
func (m *GetAllClickInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetAllClickInfoResponse.Size(m)
}
func (m *GetAllClickInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllClickInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllClickInfoResponse proto.InternalMessageInfo

func (m *GetAllClickInfoResponse) GetClickInfos() []*Click {
	if m != nil {
		return m.ClickInfos
	}
	return nil
}

func (m *GetAllClickInfoResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ClickInfoId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BranchId             string   `protobuf:"bytes,2,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickInfoId) Reset()         { *m = ClickInfoId{} }
func (m *ClickInfoId) String() string { return proto.CompactTextString(m) }
func (*ClickInfoId) ProtoMessage()    {}
func (*ClickInfoId) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d26b878620e488b, []int{2}
}

func (m *ClickInfoId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickInfoId.Unmarshal(m, b)
}
func (m *ClickInfoId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickInfoId.Marshal(b, m, deterministic)
}
func (m *ClickInfoId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickInfoId.Merge(m, src)
}
func (m *ClickInfoId) XXX_Size() int {
	return xxx_messageInfo_ClickInfoId.Size(m)
}
func (m *ClickInfoId) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickInfoId.DiscardUnknown(m)
}

var xxx_messageInfo_ClickInfoId proto.InternalMessageInfo

func (m *ClickInfoId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClickInfoId) GetBranchId() string {
	if m != nil {
		return m.BranchId
	}
	return ""
}

type ClickShipperIdAndKey struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClickShipperIdAndKey) Reset()         { *m = ClickShipperIdAndKey{} }
func (m *ClickShipperIdAndKey) String() string { return proto.CompactTextString(m) }
func (*ClickShipperIdAndKey) ProtoMessage()    {}
func (*ClickShipperIdAndKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d26b878620e488b, []int{3}
}

func (m *ClickShipperIdAndKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClickShipperIdAndKey.Unmarshal(m, b)
}
func (m *ClickShipperIdAndKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClickShipperIdAndKey.Marshal(b, m, deterministic)
}
func (m *ClickShipperIdAndKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClickShipperIdAndKey.Merge(m, src)
}
func (m *ClickShipperIdAndKey) XXX_Size() int {
	return xxx_messageInfo_ClickShipperIdAndKey.Size(m)
}
func (m *ClickShipperIdAndKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ClickShipperIdAndKey.DiscardUnknown(m)
}

var xxx_messageInfo_ClickShipperIdAndKey proto.InternalMessageInfo

func (m *ClickShipperIdAndKey) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClickShipperIdAndKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*GetAllClickInfoRequest)(nil), "genproto.GetAllClickInfoRequest")
	proto.RegisterType((*GetAllClickInfoResponse)(nil), "genproto.GetAllClickInfoResponse")
	proto.RegisterType((*ClickInfoId)(nil), "genproto.ClickInfoId")
	proto.RegisterType((*ClickShipperIdAndKey)(nil), "genproto.ClickShipperIdAndKey")
}

func init() { proto.RegisterFile("click_info_service.proto", fileDescriptor_9d26b878620e488b) }

var fileDescriptor_9d26b878620e488b = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x51, 0x6f, 0xda, 0x40,
	0x0c, 0x0e, 0x84, 0x45, 0xc5, 0x48, 0x1b, 0xb2, 0x5a, 0x1a, 0xa5, 0xea, 0xc4, 0xee, 0x89, 0xa7,
	0x30, 0xd1, 0x97, 0x6d, 0x6f, 0x2d, 0x9b, 0x10, 0xda, 0xc3, 0xa4, 0x54, 0x7b, 0x99, 0x34, 0xa1,
	0x90, 0x18, 0x38, 0x35, 0xcd, 0x65, 0x77, 0xc7, 0xa4, 0xfc, 0x92, 0xfd, 0xdd, 0x29, 0x77, 0x09,
	0x4c, 0x29, 0xec, 0xed, 0xec, 0xcf, 0x9f, 0xed, 0xcf, 0xf6, 0x81, 0x9f, 0x64, 0x3c, 0x79, 0x5a,
	0xf1, 0x7c, 0x23, 0x56, 0x8a, 0xe4, 0x6f, 0x9e, 0x50, 0x58, 0x48, 0xa1, 0x05, 0x5e, 0x6c, 0x29,
	0x37, 0xaf, 0x60, 0x78, 0x8c, 0xb1, 0x58, 0x70, 0xb3, 0x15, 0x62, 0x9b, 0xd1, 0xd4, 0x58, 0xeb,
	0xfd, 0x66, 0x4a, 0xcf, 0x85, 0x2e, 0x2d, 0xc8, 0x4a, 0x18, 0x2d, 0x48, 0xdf, 0x67, 0xd9, 0xbc,
	0xa2, 0x2d, 0xf3, 0x8d, 0x88, 0xe8, 0xd7, 0x9e, 0x94, 0xc6, 0x5b, 0x00, 0xb5, 0xe3, 0x45, 0x41,
	0x72, 0xc5, 0x53, 0xbf, 0x33, 0xee, 0x4c, 0xfa, 0x51, 0xbf, 0xf6, 0x2c, 0x53, 0x1c, 0x81, 0xa7,
	0x28, 0x96, 0xc9, 0xce, 0xef, 0x1a, 0xa8, 0xb6, 0x10, 0xa1, 0x57, 0xc4, 0x5b, 0xf2, 0xdd, 0x71,
	0x67, 0xd2, 0x8b, 0xcc, 0x1b, 0x2f, 0xe1, 0x55, 0xc6, 0x9f, 0xb9, 0xf6, 0x7b, 0xc6, 0x69, 0x0d,
	0x16, 0xc3, 0xf5, 0x8b, 0xd2, 0xaa, 0x10, 0xb9, 0x22, 0x7c, 0x0f, 0x83, 0xa3, 0x0c, 0xe5, 0x77,
	0xc6, 0xee, 0x64, 0x30, 0x7b, 0x13, 0x36, 0x22, 0x43, 0xc3, 0x88, 0x20, 0x69, 0x88, 0xaa, 0x2a,
	0x91, 0x88, 0x7d, 0xae, 0x4d, 0x37, 0xbd, 0xc8, 0x1a, 0xec, 0x13, 0x0c, 0x0e, 0xc9, 0x97, 0x29,
	0xbe, 0x86, 0xee, 0x41, 0x4a, 0x97, 0xa7, 0x78, 0x03, 0xfd, 0xb5, 0x8c, 0xf3, 0x64, 0x57, 0x29,
	0xb4, 0x32, 0x2e, 0xac, 0x63, 0x99, 0xb2, 0x0f, 0x70, 0x69, 0xb8, 0x8f, 0x8d, 0xe4, 0xfb, 0x3c,
	0xfd, 0x4a, 0xe5, 0x8b, 0x24, 0x43, 0x70, 0x9f, 0xa8, 0xac, 0xe9, 0xd5, 0x73, 0xf6, 0xc7, 0x85,
	0xe1, 0xa1, 0xec, 0xa3, 0xdd, 0x13, 0xce, 0xc0, 0x9b, 0x4b, 0x8a, 0x35, 0x61, 0x5b, 0x47, 0x70,
	0xd5, 0x72, 0xd8, 0x6e, 0x99, 0x83, 0x53, 0x70, 0x17, 0xa4, 0xf1, 0x34, 0x1e, 0xb4, 0xf3, 0x30,
	0x07, 0xbf, 0x81, 0x67, 0x47, 0x8a, 0xe3, 0x23, 0x78, 0x7a, 0xbf, 0xc1, 0xbb, 0xff, 0x44, 0xd8,
	0x35, 0x30, 0x07, 0xef, 0xc0, 0xfb, 0x5e, 0xa4, 0x27, 0xbb, 0x1e, 0x85, 0xf6, 0xae, 0xc2, 0xe6,
	0xae, 0xc2, 0x2f, 0xd5, 0x5d, 0x31, 0x07, 0x3f, 0x82, 0xf7, 0x99, 0x32, 0xd2, 0x74, 0xae, 0xf3,
	0xf3, 0xd4, 0x9f, 0x70, 0xbb, 0x20, 0x5d, 0x8f, 0xdc, 0x0e, 0xfc, 0xa1, 0x9c, 0x4b, 0x4a, 0x29,
	0xd7, 0x3c, 0xce, 0x14, 0x06, 0xad, 0x8c, 0xff, 0x60, 0xc1, 0xdb, 0x16, 0xd6, 0xda, 0x1c, 0x73,
	0x1e, 0xae, 0x7f, 0x5c, 0x35, 0x21, 0xd3, 0xbd, 0x22, 0xd9, 0xfc, 0xa2, 0xb5, 0x67, 0x7c, 0x77,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xee, 0x45, 0x94, 0x08, 0x62, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClickInfoServiceClient is the client API for ClickInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClickInfoServiceClient interface {
	Create(ctx context.Context, in *Click, opts ...grpc.CallOption) (*ClickInfoId, error)
	Get(ctx context.Context, in *ClickInfoId, opts ...grpc.CallOption) (*Click, error)
	GetAll(ctx context.Context, in *GetAllClickInfoRequest, opts ...grpc.CallOption) (*GetAllClickInfoResponse, error)
	Update(ctx context.Context, in *Click, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *ClickInfoId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetShipperAndKeyByCredentials(ctx context.Context, in *ClickCredentials, opts ...grpc.CallOption) (*ClickShipperIdAndKey, error)
}

type clickInfoServiceClient struct {
	cc *grpc.ClientConn
}

func NewClickInfoServiceClient(cc *grpc.ClientConn) ClickInfoServiceClient {
	return &clickInfoServiceClient{cc}
}

func (c *clickInfoServiceClient) Create(ctx context.Context, in *Click, opts ...grpc.CallOption) (*ClickInfoId, error) {
	out := new(ClickInfoId)
	err := c.cc.Invoke(ctx, "/genproto.ClickInfoService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickInfoServiceClient) Get(ctx context.Context, in *ClickInfoId, opts ...grpc.CallOption) (*Click, error) {
	out := new(Click)
	err := c.cc.Invoke(ctx, "/genproto.ClickInfoService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickInfoServiceClient) GetAll(ctx context.Context, in *GetAllClickInfoRequest, opts ...grpc.CallOption) (*GetAllClickInfoResponse, error) {
	out := new(GetAllClickInfoResponse)
	err := c.cc.Invoke(ctx, "/genproto.ClickInfoService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickInfoServiceClient) Update(ctx context.Context, in *Click, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.ClickInfoService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickInfoServiceClient) Delete(ctx context.Context, in *ClickInfoId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.ClickInfoService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickInfoServiceClient) GetShipperAndKeyByCredentials(ctx context.Context, in *ClickCredentials, opts ...grpc.CallOption) (*ClickShipperIdAndKey, error) {
	out := new(ClickShipperIdAndKey)
	err := c.cc.Invoke(ctx, "/genproto.ClickInfoService/GetShipperAndKeyByCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClickInfoServiceServer is the server API for ClickInfoService service.
type ClickInfoServiceServer interface {
	Create(context.Context, *Click) (*ClickInfoId, error)
	Get(context.Context, *ClickInfoId) (*Click, error)
	GetAll(context.Context, *GetAllClickInfoRequest) (*GetAllClickInfoResponse, error)
	Update(context.Context, *Click) (*emptypb.Empty, error)
	Delete(context.Context, *ClickInfoId) (*emptypb.Empty, error)
	GetShipperAndKeyByCredentials(context.Context, *ClickCredentials) (*ClickShipperIdAndKey, error)
}

// UnimplementedClickInfoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClickInfoServiceServer struct {
}

func (*UnimplementedClickInfoServiceServer) Create(ctx context.Context, req *Click) (*ClickInfoId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedClickInfoServiceServer) Get(ctx context.Context, req *ClickInfoId) (*Click, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedClickInfoServiceServer) GetAll(ctx context.Context, req *GetAllClickInfoRequest) (*GetAllClickInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedClickInfoServiceServer) Update(ctx context.Context, req *Click) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedClickInfoServiceServer) Delete(ctx context.Context, req *ClickInfoId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedClickInfoServiceServer) GetShipperAndKeyByCredentials(ctx context.Context, req *ClickCredentials) (*ClickShipperIdAndKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipperAndKeyByCredentials not implemented")
}

func RegisterClickInfoServiceServer(s *grpc.Server, srv ClickInfoServiceServer) {
	s.RegisterService(&_ClickInfoService_serviceDesc, srv)
}

func _ClickInfoService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Click)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickInfoServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ClickInfoService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickInfoServiceServer).Create(ctx, req.(*Click))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickInfoService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickInfoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickInfoServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ClickInfoService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickInfoServiceServer).Get(ctx, req.(*ClickInfoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickInfoService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllClickInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickInfoServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ClickInfoService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickInfoServiceServer).GetAll(ctx, req.(*GetAllClickInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickInfoService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Click)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickInfoServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ClickInfoService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickInfoServiceServer).Update(ctx, req.(*Click))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickInfoService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickInfoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickInfoServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ClickInfoService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickInfoServiceServer).Delete(ctx, req.(*ClickInfoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickInfoService_GetShipperAndKeyByCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickInfoServiceServer).GetShipperAndKeyByCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ClickInfoService/GetShipperAndKeyByCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickInfoServiceServer).GetShipperAndKeyByCredentials(ctx, req.(*ClickCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClickInfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.ClickInfoService",
	HandlerType: (*ClickInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ClickInfoService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ClickInfoService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ClickInfoService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClickInfoService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClickInfoService_Delete_Handler,
		},
		{
			MethodName: "GetShipperAndKeyByCredentials",
			Handler:    _ClickInfoService_GetShipperAndKeyByCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "click_info_service.proto",
}
