// Code generated by protoc-gen-go. DO NOT EDIT.
// source: aggregator_service.proto

package user_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetAllAggregatorsRequest struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ShipperId            string   `protobuf:"bytes,4,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllAggregatorsRequest) Reset()         { *m = GetAllAggregatorsRequest{} }
func (m *GetAllAggregatorsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllAggregatorsRequest) ProtoMessage()    {}
func (*GetAllAggregatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b4f3dd46aa9ff39, []int{0}
}

func (m *GetAllAggregatorsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllAggregatorsRequest.Unmarshal(m, b)
}
func (m *GetAllAggregatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllAggregatorsRequest.Marshal(b, m, deterministic)
}
func (m *GetAllAggregatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllAggregatorsRequest.Merge(m, src)
}
func (m *GetAllAggregatorsRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllAggregatorsRequest.Size(m)
}
func (m *GetAllAggregatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllAggregatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllAggregatorsRequest proto.InternalMessageInfo

func (m *GetAllAggregatorsRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllAggregatorsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllAggregatorsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetAllAggregatorsRequest) GetShipperId() string {
	if m != nil {
		return m.ShipperId
	}
	return ""
}

func init() {
	proto.RegisterType((*GetAllAggregatorsRequest)(nil), "genproto.GetAllAggregatorsRequest")
}

func init() { proto.RegisterFile("aggregator_service.proto", fileDescriptor_6b4f3dd46aa9ff39) }

var fileDescriptor_6b4f3dd46aa9ff39 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcb, 0x4e, 0xf3, 0x30,
	0x10, 0x85, 0xd3, 0xcb, 0x1f, 0xfd, 0x9d, 0x15, 0x8c, 0x0a, 0x58, 0x41, 0x48, 0x95, 0xd9, 0x74,
	0x95, 0x48, 0x20, 0x24, 0xc4, 0xae, 0x5c, 0x54, 0x75, 0x9b, 0x8a, 0x0d, 0x9b, 0x2a, 0x25, 0x83,
	0x89, 0x94, 0xc4, 0xc6, 0x76, 0x40, 0x3c, 0x25, 0xaf, 0x84, 0xe2, 0x90, 0x66, 0xd3, 0x74, 0x37,
	0x73, 0xe6, 0x8c, 0xad, 0xcf, 0xc7, 0xc0, 0x12, 0x21, 0x34, 0x89, 0xc4, 0x4a, 0xbd, 0x31, 0xa4,
	0x3f, 0xb3, 0x57, 0x0a, 0x95, 0x96, 0x56, 0xe2, 0x7f, 0x41, 0xa5, 0xab, 0x82, 0xa3, 0xce, 0xd3,
	0xcc, 0x82, 0x73, 0x21, 0xa5, 0xc8, 0x29, 0x72, 0xdd, 0xb6, 0x7a, 0x8b, 0xa8, 0x50, 0xf6, 0xbb,
	0x19, 0xf2, 0x2f, 0x60, 0x4b, 0xb2, 0x8b, 0x3c, 0x5f, 0xec, 0xd6, 0x4c, 0x4c, 0x1f, 0x15, 0x19,
	0x8b, 0x08, 0x63, 0x95, 0x08, 0x62, 0x83, 0xd9, 0x60, 0x3e, 0x8a, 0x5d, 0x8d, 0x53, 0xf8, 0x97,
	0x67, 0x45, 0x66, 0xd9, 0xd0, 0x89, 0x4d, 0x53, 0x3b, 0xcb, 0xa4, 0x20, 0x36, 0x9a, 0x0d, 0xe6,
	0x93, 0xd8, 0xd5, 0x78, 0x01, 0x60, 0xde, 0x33, 0xa5, 0x48, 0x6f, 0xb2, 0x94, 0x8d, 0xdd, 0x64,
	0xf2, 0xa7, 0xac, 0xd2, 0xab, 0x9f, 0x21, 0x1c, 0x77, 0x77, 0xae, 0x1b, 0x1a, 0xbc, 0x05, 0xff,
	0x41, 0x53, 0x62, 0x09, 0xa7, 0x61, 0x8b, 0x14, 0x76, 0xb6, 0xe0, 0x74, 0x9f, 0xba, 0x4a, 0xb9,
	0x87, 0x37, 0x30, 0x5a, 0x92, 0xc5, 0x1e, 0x43, 0xb0, 0xf7, 0x38, 0xee, 0xe1, 0x1a, 0xfc, 0x86,
	0x1f, 0x79, 0xe7, 0xe8, 0x7b, 0x91, 0xe0, 0xf2, 0xa0, 0xc7, 0x28, 0x59, 0x1a, 0xe2, 0x5e, 0x4d,
	0xf1, 0xac, 0xd2, 0x83, 0x14, 0x2e, 0x92, 0xb0, 0x8d, 0x24, 0x7c, 0xaa, 0x23, 0xe1, 0x1e, 0xde,
	0x81, 0xff, 0x48, 0x39, 0x59, 0xea, 0x05, 0xe9, 0xdd, 0xbd, 0x3f, 0x7b, 0x39, 0x69, 0x57, 0xa2,
	0xca, 0xd0, 0xee, 0x8b, 0x6c, 0x7d, 0xa7, 0x5d, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x71, 0x3f,
	0xb5, 0xd6, 0x3f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AggregatorServiceClient is the client API for AggregatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AggregatorServiceClient interface {
	Create(ctx context.Context, in *Aggregator, opts ...grpc.CallOption) (*AggregatorId, error)
	Get(ctx context.Context, in *AggregatorId, opts ...grpc.CallOption) (*Aggregator, error)
	GetAll(ctx context.Context, in *GetAllAggregatorsRequest, opts ...grpc.CallOption) (*GetAllAggregatorsResponse, error)
	Update(ctx context.Context, in *Aggregator, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *AggregatorId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type aggregatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewAggregatorServiceClient(cc *grpc.ClientConn) AggregatorServiceClient {
	return &aggregatorServiceClient{cc}
}

func (c *aggregatorServiceClient) Create(ctx context.Context, in *Aggregator, opts ...grpc.CallOption) (*AggregatorId, error) {
	out := new(AggregatorId)
	err := c.cc.Invoke(ctx, "/genproto.AggregatorService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorServiceClient) Get(ctx context.Context, in *AggregatorId, opts ...grpc.CallOption) (*Aggregator, error) {
	out := new(Aggregator)
	err := c.cc.Invoke(ctx, "/genproto.AggregatorService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorServiceClient) GetAll(ctx context.Context, in *GetAllAggregatorsRequest, opts ...grpc.CallOption) (*GetAllAggregatorsResponse, error) {
	out := new(GetAllAggregatorsResponse)
	err := c.cc.Invoke(ctx, "/genproto.AggregatorService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorServiceClient) Update(ctx context.Context, in *Aggregator, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.AggregatorService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorServiceClient) Delete(ctx context.Context, in *AggregatorId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.AggregatorService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorServiceServer is the server API for AggregatorService service.
type AggregatorServiceServer interface {
	Create(context.Context, *Aggregator) (*AggregatorId, error)
	Get(context.Context, *AggregatorId) (*Aggregator, error)
	GetAll(context.Context, *GetAllAggregatorsRequest) (*GetAllAggregatorsResponse, error)
	Update(context.Context, *Aggregator) (*emptypb.Empty, error)
	Delete(context.Context, *AggregatorId) (*emptypb.Empty, error)
}

// UnimplementedAggregatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAggregatorServiceServer struct {
}

func (*UnimplementedAggregatorServiceServer) Create(ctx context.Context, req *Aggregator) (*AggregatorId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedAggregatorServiceServer) Get(ctx context.Context, req *AggregatorId) (*Aggregator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedAggregatorServiceServer) GetAll(ctx context.Context, req *GetAllAggregatorsRequest) (*GetAllAggregatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedAggregatorServiceServer) Update(ctx context.Context, req *Aggregator) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedAggregatorServiceServer) Delete(ctx context.Context, req *AggregatorId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterAggregatorServiceServer(s *grpc.Server, srv AggregatorServiceServer) {
	s.RegisterService(&_AggregatorService_serviceDesc, srv)
}

func _AggregatorService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Aggregator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AggregatorService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).Create(ctx, req.(*Aggregator))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AggregatorService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).Get(ctx, req.(*AggregatorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAggregatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AggregatorService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).GetAll(ctx, req.(*GetAllAggregatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Aggregator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AggregatorService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).Update(ctx, req.(*Aggregator))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.AggregatorService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServiceServer).Delete(ctx, req.(*AggregatorId))
	}
	return interceptor(ctx, in, info, handler)
}

var _AggregatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.AggregatorService",
	HandlerType: (*AggregatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AggregatorService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AggregatorService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _AggregatorService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AggregatorService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AggregatorService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggregator_service.proto",
}
