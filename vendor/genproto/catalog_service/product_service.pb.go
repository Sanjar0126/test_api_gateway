// Code generated by protoc-gen-go. DO NOT EDIT.
// source: product_service.proto

package catalog_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetByCrmIDRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetByCrmIDRequest) Reset()         { *m = GetByCrmIDRequest{} }
func (m *GetByCrmIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetByCrmIDRequest) ProtoMessage()    {}
func (*GetByCrmIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a1a24e6b7d7ed5, []int{0}
}

func (m *GetByCrmIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetByCrmIDRequest.Unmarshal(m, b)
}
func (m *GetByCrmIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetByCrmIDRequest.Marshal(b, m, deterministic)
}
func (m *GetByCrmIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetByCrmIDRequest.Merge(m, src)
}
func (m *GetByCrmIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetByCrmIDRequest.Size(m)
}
func (m *GetByCrmIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetByCrmIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetByCrmIDRequest proto.InternalMessageInfo

func (m *GetByCrmIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetByCrmIDRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type GetAllProductsRequest struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	ShipperId            string   `protobuf:"bytes,3,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
	CategoryId           string   `protobuf:"bytes,4,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	Search               string   `protobuf:"bytes,5,opt,name=search,proto3" json:"search,omitempty"`
	Iiko                 bool     `protobuf:"varint,6,opt,name=iiko,proto3" json:"iiko,omitempty"`
	Jowi                 bool     `protobuf:"varint,7,opt,name=jowi,proto3" json:"jowi,omitempty"`
	GetOnlyActive        bool     `protobuf:"varint,8,opt,name=get_only_active,json=getOnlyActive,proto3" json:"get_only_active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllProductsRequest) Reset()         { *m = GetAllProductsRequest{} }
func (m *GetAllProductsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllProductsRequest) ProtoMessage()    {}
func (*GetAllProductsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a1a24e6b7d7ed5, []int{1}
}

func (m *GetAllProductsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllProductsRequest.Unmarshal(m, b)
}
func (m *GetAllProductsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllProductsRequest.Marshal(b, m, deterministic)
}
func (m *GetAllProductsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllProductsRequest.Merge(m, src)
}
func (m *GetAllProductsRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllProductsRequest.Size(m)
}
func (m *GetAllProductsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllProductsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllProductsRequest proto.InternalMessageInfo

func (m *GetAllProductsRequest) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllProductsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllProductsRequest) GetShipperId() string {
	if m != nil {
		return m.ShipperId
	}
	return ""
}

func (m *GetAllProductsRequest) GetCategoryId() string {
	if m != nil {
		return m.CategoryId
	}
	return ""
}

func (m *GetAllProductsRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *GetAllProductsRequest) GetIiko() bool {
	if m != nil {
		return m.Iiko
	}
	return false
}

func (m *GetAllProductsRequest) GetJowi() bool {
	if m != nil {
		return m.Jowi
	}
	return false
}

func (m *GetAllProductsRequest) GetGetOnlyActive() bool {
	if m != nil {
		return m.GetOnlyActive
	}
	return false
}

type GetAllProductsResponse struct {
	Products             []*Product `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
	Count                int64      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetAllProductsResponse) Reset()         { *m = GetAllProductsResponse{} }
func (m *GetAllProductsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllProductsResponse) ProtoMessage()    {}
func (*GetAllProductsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a1a24e6b7d7ed5, []int{2}
}

func (m *GetAllProductsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllProductsResponse.Unmarshal(m, b)
}
func (m *GetAllProductsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllProductsResponse.Marshal(b, m, deterministic)
}
func (m *GetAllProductsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllProductsResponse.Merge(m, src)
}
func (m *GetAllProductsResponse) XXX_Size() int {
	return xxx_messageInfo_GetAllProductsResponse.Size(m)
}
func (m *GetAllProductsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllProductsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllProductsResponse proto.InternalMessageInfo

func (m *GetAllProductsResponse) GetProducts() []*Product {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *GetAllProductsResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*GetByCrmIDRequest)(nil), "genproto.GetByCrmIDRequest")
	proto.RegisterType((*GetAllProductsRequest)(nil), "genproto.GetAllProductsRequest")
	proto.RegisterType((*GetAllProductsResponse)(nil), "genproto.GetAllProductsResponse")
}

func init() { proto.RegisterFile("product_service.proto", fileDescriptor_64a1a24e6b7d7ed5) }

var fileDescriptor_64a1a24e6b7d7ed5 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4e,
	0x10, 0xcf, 0x57, 0xfd, 0x4f, 0xa6, 0x6a, 0xff, 0x74, 0xd4, 0x06, 0xcb, 0x15, 0x6a, 0xe4, 0x03,
	0xca, 0x05, 0x07, 0x15, 0xa1, 0x1e, 0x40, 0x48, 0x69, 0x8a, 0xa2, 0x1c, 0xf8, 0x90, 0x51, 0x2f,
	0x48, 0x28, 0x72, 0xed, 0xc1, 0x5d, 0xd8, 0x78, 0x97, 0xf5, 0xa6, 0xc8, 0xaf, 0xc7, 0xdb, 0xf0,
	0x16, 0xc8, 0xbb, 0x76, 0x42, 0xd3, 0x06, 0xc4, 0x6d, 0xf6, 0xf7, 0x31, 0x9e, 0xd9, 0x99, 0x35,
	0x1c, 0x49, 0x25, 0x92, 0x65, 0xac, 0xe7, 0x39, 0xa9, 0x1b, 0x16, 0x53, 0x20, 0x95, 0xd0, 0x02,
	0xbb, 0x29, 0x65, 0x26, 0xf2, 0xf6, 0xe2, 0x48, 0x47, 0x5c, 0xa4, 0x96, 0xf0, 0x8e, 0x53, 0x21,
	0x52, 0x4e, 0x23, 0x73, 0xba, 0x5a, 0x7e, 0x1e, 0xd1, 0x42, 0xea, 0xc2, 0x92, 0xfe, 0x19, 0x1c,
	0x4c, 0x49, 0x9f, 0x17, 0x13, 0xb5, 0x98, 0x5d, 0x84, 0xf4, 0x6d, 0x49, 0xb9, 0xc6, 0x7d, 0x68,
	0xb1, 0xc4, 0x6d, 0x0e, 0x9a, 0xc3, 0x5e, 0xd8, 0x62, 0x09, 0x22, 0x74, 0x74, 0x21, 0xc9, 0x6d,
	0x19, 0xc4, 0xc4, 0xfe, 0xcf, 0x26, 0x1c, 0x4d, 0x49, 0x8f, 0x39, 0x7f, 0x6f, 0xcb, 0xc9, 0x6b,
	0x37, 0x42, 0x47, 0x46, 0x29, 0x19, 0x7f, 0x3b, 0x34, 0x31, 0x1e, 0xc2, 0x0e, 0x67, 0x0b, 0xa6,
	0x4d, 0x8a, 0x76, 0x68, 0x0f, 0xf8, 0x08, 0x20, 0xbf, 0x66, 0x52, 0x92, 0x9a, 0xb3, 0xc4, 0x6d,
	0x9b, 0xec, 0xbd, 0x0a, 0x99, 0x25, 0x78, 0x02, 0xbb, 0x71, 0xa4, 0x29, 0x15, 0xaa, 0x28, 0xf9,
	0x8e, 0xe1, 0xa1, 0x86, 0x66, 0x09, 0xf6, 0xc1, 0xc9, 0x29, 0x52, 0xf1, 0xb5, 0xbb, 0x63, 0xb8,
	0xea, 0x54, 0x56, 0xc0, 0xd8, 0x57, 0xe1, 0x3a, 0x83, 0xe6, 0xb0, 0x1b, 0x9a, 0xb8, 0xc4, 0xbe,
	0x88, 0xef, 0xcc, 0xfd, 0xcf, 0x62, 0x65, 0x8c, 0x8f, 0xe1, 0xff, 0x94, 0xf4, 0x5c, 0x64, 0xbc,
	0x98, 0x47, 0xb1, 0x66, 0x37, 0xe4, 0x76, 0x0d, 0xbd, 0x97, 0x92, 0x7e, 0x97, 0xf1, 0x62, 0x6c,
	0x40, 0xff, 0x13, 0xf4, 0x37, 0x5b, 0xcd, 0xa5, 0xc8, 0x72, 0xc2, 0x27, 0xd0, 0xad, 0xa6, 0x91,
	0xbb, 0xcd, 0x41, 0x7b, 0xb8, 0x7b, 0x7a, 0x10, 0xd4, 0x73, 0x08, 0x2a, 0x75, 0xb8, 0x92, 0x94,
	0xd7, 0x10, 0x8b, 0x65, 0xb6, 0xba, 0x06, 0x73, 0x38, 0xfd, 0xd1, 0x81, 0xfd, 0x4a, 0xfb, 0xc1,
	0x8e, 0x14, 0xcf, 0xc0, 0x99, 0x28, 0x8a, 0x34, 0xe1, 0xdd, 0x7c, 0x9e, 0xbb, 0x86, 0xac, 0xa8,
	0x2e, 0xc7, 0x6f, 0xe0, 0x1b, 0x70, 0x6c, 0xa9, 0x78, 0xb2, 0x56, 0xdd, 0x3b, 0x27, 0x6f, 0xb0,
	0x5d, 0xb0, 0x4a, 0xf7, 0x14, 0xda, 0x53, 0xd2, 0x78, 0x78, 0x4b, 0x5a, 0x27, 0xb8, 0x5b, 0x9a,
	0xdf, 0xc0, 0x97, 0xd0, 0x33, 0x0b, 0xf5, 0x36, 0x5a, 0x10, 0x7a, 0xb7, 0x7c, 0x16, 0xfc, 0xa3,
	0xfb, 0x39, 0x38, 0x97, 0x32, 0xd9, 0xd2, 0x77, 0x3f, 0xb0, 0x9b, 0x1c, 0xd4, 0x9b, 0x1c, 0xbc,
	0x2e, 0x37, 0xd9, 0x6f, 0xe0, 0x0b, 0x70, 0x2e, 0x88, 0x93, 0x26, 0x7c, 0xb8, 0xb6, 0x59, 0xa4,
	0xfe, 0xdc, 0x76, 0xf3, 0x18, 0x7a, 0x56, 0x5a, 0xde, 0x9a, 0xb7, 0xe9, 0x1f, 0x73, 0xfe, 0xf7,
	0x14, 0xaf, 0x00, 0xd6, 0xaf, 0x08, 0x8f, 0x37, 0xba, 0xfe, 0xfd, 0x6d, 0xdd, 0xdf, 0xf6, 0x18,
	0x1e, 0x5c, 0xca, 0x9c, 0x94, 0x9e, 0xa8, 0x45, 0x85, 0xfe, 0xe3, 0xe0, 0xcf, 0xbd, 0x8f, 0x6e,
	0x4d, 0x8e, 0xaa, 0xf7, 0x5f, 0xff, 0x20, 0xae, 0x1c, 0x03, 0x3f, 0xfb, 0x15, 0x00, 0x00, 0xff,
	0xff, 0x69, 0x81, 0x7b, 0x6a, 0x3a, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProductServiceClient interface {
	Create(ctx context.Context, in *Product, opts ...grpc.CallOption) (*CreateResponse, error)
	GetAll(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Product, error)
	GetByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*Product, error)
	Update(ctx context.Context, in *Product, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAll(ctx context.Context, in *DeleteAllRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetByCrmID(ctx context.Context, in *GetByCrmIDRequest, opts ...grpc.CallOption) (*Product, error)
	UpsertCrmProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*CreateResponse, error)
}

type productServiceClient struct {
	cc *grpc.ClientConn
}

func NewProductServiceClient(cc *grpc.ClientConn) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) Create(ctx context.Context, in *Product, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/genproto.ProductService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetAll(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error) {
	out := new(GetAllProductsResponse)
	err := c.cc.Invoke(ctx, "/genproto.ProductService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/genproto.ProductService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/genproto.ProductService/GetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) Update(ctx context.Context, in *Product, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.ProductService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.ProductService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) DeleteAll(ctx context.Context, in *DeleteAllRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.ProductService/DeleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetByCrmID(ctx context.Context, in *GetByCrmIDRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/genproto.ProductService/GetByCrmID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) UpsertCrmProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/genproto.ProductService/UpsertCrmProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
type ProductServiceServer interface {
	Create(context.Context, *Product) (*CreateResponse, error)
	GetAll(context.Context, *GetAllProductsRequest) (*GetAllProductsResponse, error)
	Get(context.Context, *GetRequest) (*Product, error)
	GetByName(context.Context, *GetByNameRequest) (*Product, error)
	Update(context.Context, *Product) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	DeleteAll(context.Context, *DeleteAllRequest) (*emptypb.Empty, error)
	GetByCrmID(context.Context, *GetByCrmIDRequest) (*Product, error)
	UpsertCrmProduct(context.Context, *Product) (*CreateResponse, error)
}

// UnimplementedProductServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (*UnimplementedProductServiceServer) Create(ctx context.Context, req *Product) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedProductServiceServer) GetAll(ctx context.Context, req *GetAllProductsRequest) (*GetAllProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedProductServiceServer) Get(ctx context.Context, req *GetRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedProductServiceServer) GetByName(ctx context.Context, req *GetByNameRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (*UnimplementedProductServiceServer) Update(ctx context.Context, req *Product) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedProductServiceServer) Delete(ctx context.Context, req *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedProductServiceServer) DeleteAll(ctx context.Context, req *DeleteAllRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (*UnimplementedProductServiceServer) GetByCrmID(ctx context.Context, req *GetByCrmIDRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCrmID not implemented")
}
func (*UnimplementedProductServiceServer) UpsertCrmProduct(ctx context.Context, req *Product) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCrmProduct not implemented")
}

func RegisterProductServiceServer(s *grpc.Server, srv ProductServiceServer) {
	s.RegisterService(&_ProductService_serviceDesc, srv)
}

func _ProductService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProductService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Create(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProductService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetAll(ctx, req.(*GetAllProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProductService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProductService/GetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetByName(ctx, req.(*GetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProductService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Update(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProductService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProductService/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).DeleteAll(ctx, req.(*DeleteAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetByCrmID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByCrmIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetByCrmID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProductService/GetByCrmID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetByCrmID(ctx, req.(*GetByCrmIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_UpsertCrmProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).UpsertCrmProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProductService/UpsertCrmProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).UpsertCrmProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProductService_Create_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ProductService_GetAll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProductService_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _ProductService_GetByName_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProductService_Delete_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _ProductService_DeleteAll_Handler,
		},
		{
			MethodName: "GetByCrmID",
			Handler:    _ProductService_GetByCrmID_Handler,
		},
		{
			MethodName: "UpsertCrmProduct",
			Handler:    _ProductService_UpsertCrmProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_service.proto",
}
