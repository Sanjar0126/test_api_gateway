// Code generated by protoc-gen-go. DO NOT EDIT.
// source: telegram_log_service.proto

package consumer_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("telegram_log_service.proto", fileDescriptor_3991b6b28861f94f) }

var fileDescriptor_3991b6b28861f94f = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x49, 0xcd, 0x49,
	0x4d, 0x2f, 0x4a, 0xcc, 0x8d, 0xcf, 0xc9, 0x4f, 0x8f, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x48, 0xce, 0xcf, 0x2b, 0x2e, 0xcd, 0x4d, 0x2d,
	0x82, 0x89, 0x4b, 0x09, 0x21, 0xab, 0x86, 0xa8, 0x92, 0xe2, 0x49, 0xce, 0xcf, 0xcd, 0xcd, 0xcf,
	0x83, 0xf0, 0x8c, 0x9e, 0xb2, 0x70, 0x09, 0x85, 0x40, 0x15, 0xf9, 0xe4, 0xa7, 0x07, 0x43, 0x34,
	0x0a, 0x45, 0x72, 0x09, 0x3a, 0x17, 0xa5, 0x26, 0x96, 0xa4, 0x22, 0xc9, 0x09, 0xc9, 0xea, 0xa1,
	0x5b, 0xa0, 0x87, 0x24, 0x2d, 0xa5, 0x8a, 0x57, 0x3a, 0x28, 0xb5, 0xb8, 0x20, 0x3f, 0xaf, 0x38,
	0x55, 0x28, 0x91, 0x4b, 0xc8, 0x3d, 0xb5, 0x04, 0x49, 0xc6, 0xa9, 0xd2, 0xd3, 0x45, 0x48, 0x85,
	0x80, 0xe6, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x62, 0xad, 0x48, 0xe7, 0x12, 0x47, 0xb5, 0xa2, 0xd8,
	0xa9, 0x32, 0xb8, 0x24, 0xb1, 0xa4, 0xb4, 0x98, 0x48, 0x7b, 0xd4, 0xf0, 0xaa, 0x2a, 0x86, 0x5b,
	0x94, 0xc3, 0x25, 0x1e, 0x5a, 0x90, 0x82, 0x1a, 0x4c, 0x50, 0x8b, 0xb4, 0xf0, 0x1a, 0x01, 0xd1,
	0x45, 0xa2, 0xb7, 0xd2, 0xb8, 0x04, 0x31, 0x6c, 0xa3, 0x85, 0x3d, 0x41, 0x5c, 0x82, 0x2e, 0xa9,
	0x39, 0xa9, 0xa8, 0xf6, 0x10, 0x17, 0x70, 0xe2, 0x98, 0xaa, 0x5c, 0x73, 0x0b, 0x4a, 0x2a, 0x9d,
	0xa4, 0xa3, 0x24, 0xd3, 0x53, 0xf3, 0xc0, 0x69, 0x4e, 0x1f, 0x5d, 0x49, 0x12, 0x1b, 0x58, 0xdc,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x55, 0x79, 0x77, 0xe7, 0xdd, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TelegramLogServiceClient is the client API for TelegramLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TelegramLogServiceClient interface {
	CreateTelegramLog(ctx context.Context, in *TelegramLog, opts ...grpc.CallOption) (*TelegramLogResponse, error)
	GetTelegramLogByID(ctx context.Context, in *TelegramLogRequest, opts ...grpc.CallOption) (*TelegramLogResponse, error)
	GetTelegramLogsByStatus(ctx context.Context, in *TelegramLogRequest, opts ...grpc.CallOption) (*TelegramLogsResponse, error)
	UpdateTelegramLogStatus(ctx context.Context, in *TelegramLogUpdateRequest, opts ...grpc.CallOption) (*TelegramLogResponse, error)
	UpdateTelegramLog(ctx context.Context, in *TelegramLogUpdateRequest, opts ...grpc.CallOption) (*TelegramLogResponse, error)
	DeleteTelegramLog(ctx context.Context, in *TelegramLogRequest, opts ...grpc.CallOption) (*Empty, error)
}

type telegramLogServiceClient struct {
	cc *grpc.ClientConn
}

func NewTelegramLogServiceClient(cc *grpc.ClientConn) TelegramLogServiceClient {
	return &telegramLogServiceClient{cc}
}

func (c *telegramLogServiceClient) CreateTelegramLog(ctx context.Context, in *TelegramLog, opts ...grpc.CallOption) (*TelegramLogResponse, error) {
	out := new(TelegramLogResponse)
	err := c.cc.Invoke(ctx, "/consumer_service.TelegramLogService/CreateTelegramLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramLogServiceClient) GetTelegramLogByID(ctx context.Context, in *TelegramLogRequest, opts ...grpc.CallOption) (*TelegramLogResponse, error) {
	out := new(TelegramLogResponse)
	err := c.cc.Invoke(ctx, "/consumer_service.TelegramLogService/GetTelegramLogByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramLogServiceClient) GetTelegramLogsByStatus(ctx context.Context, in *TelegramLogRequest, opts ...grpc.CallOption) (*TelegramLogsResponse, error) {
	out := new(TelegramLogsResponse)
	err := c.cc.Invoke(ctx, "/consumer_service.TelegramLogService/GetTelegramLogsByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramLogServiceClient) UpdateTelegramLogStatus(ctx context.Context, in *TelegramLogUpdateRequest, opts ...grpc.CallOption) (*TelegramLogResponse, error) {
	out := new(TelegramLogResponse)
	err := c.cc.Invoke(ctx, "/consumer_service.TelegramLogService/UpdateTelegramLogStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramLogServiceClient) UpdateTelegramLog(ctx context.Context, in *TelegramLogUpdateRequest, opts ...grpc.CallOption) (*TelegramLogResponse, error) {
	out := new(TelegramLogResponse)
	err := c.cc.Invoke(ctx, "/consumer_service.TelegramLogService/UpdateTelegramLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramLogServiceClient) DeleteTelegramLog(ctx context.Context, in *TelegramLogRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/consumer_service.TelegramLogService/DeleteTelegramLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelegramLogServiceServer is the server API for TelegramLogService service.
type TelegramLogServiceServer interface {
	CreateTelegramLog(context.Context, *TelegramLog) (*TelegramLogResponse, error)
	GetTelegramLogByID(context.Context, *TelegramLogRequest) (*TelegramLogResponse, error)
	GetTelegramLogsByStatus(context.Context, *TelegramLogRequest) (*TelegramLogsResponse, error)
	UpdateTelegramLogStatus(context.Context, *TelegramLogUpdateRequest) (*TelegramLogResponse, error)
	UpdateTelegramLog(context.Context, *TelegramLogUpdateRequest) (*TelegramLogResponse, error)
	DeleteTelegramLog(context.Context, *TelegramLogRequest) (*Empty, error)
}

// UnimplementedTelegramLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTelegramLogServiceServer struct {
}

func (*UnimplementedTelegramLogServiceServer) CreateTelegramLog(ctx context.Context, req *TelegramLog) (*TelegramLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTelegramLog not implemented")
}
func (*UnimplementedTelegramLogServiceServer) GetTelegramLogByID(ctx context.Context, req *TelegramLogRequest) (*TelegramLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelegramLogByID not implemented")
}
func (*UnimplementedTelegramLogServiceServer) GetTelegramLogsByStatus(ctx context.Context, req *TelegramLogRequest) (*TelegramLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelegramLogsByStatus not implemented")
}
func (*UnimplementedTelegramLogServiceServer) UpdateTelegramLogStatus(ctx context.Context, req *TelegramLogUpdateRequest) (*TelegramLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTelegramLogStatus not implemented")
}
func (*UnimplementedTelegramLogServiceServer) UpdateTelegramLog(ctx context.Context, req *TelegramLogUpdateRequest) (*TelegramLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTelegramLog not implemented")
}
func (*UnimplementedTelegramLogServiceServer) DeleteTelegramLog(ctx context.Context, req *TelegramLogRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTelegramLog not implemented")
}

func RegisterTelegramLogServiceServer(s *grpc.Server, srv TelegramLogServiceServer) {
	s.RegisterService(&_TelegramLogService_serviceDesc, srv)
}

func _TelegramLogService_CreateTelegramLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramLogServiceServer).CreateTelegramLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumer_service.TelegramLogService/CreateTelegramLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramLogServiceServer).CreateTelegramLog(ctx, req.(*TelegramLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramLogService_GetTelegramLogByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramLogServiceServer).GetTelegramLogByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumer_service.TelegramLogService/GetTelegramLogByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramLogServiceServer).GetTelegramLogByID(ctx, req.(*TelegramLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramLogService_GetTelegramLogsByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramLogServiceServer).GetTelegramLogsByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumer_service.TelegramLogService/GetTelegramLogsByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramLogServiceServer).GetTelegramLogsByStatus(ctx, req.(*TelegramLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramLogService_UpdateTelegramLogStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLogUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramLogServiceServer).UpdateTelegramLogStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumer_service.TelegramLogService/UpdateTelegramLogStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramLogServiceServer).UpdateTelegramLogStatus(ctx, req.(*TelegramLogUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramLogService_UpdateTelegramLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLogUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramLogServiceServer).UpdateTelegramLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumer_service.TelegramLogService/UpdateTelegramLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramLogServiceServer).UpdateTelegramLog(ctx, req.(*TelegramLogUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramLogService_DeleteTelegramLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramLogServiceServer).DeleteTelegramLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumer_service.TelegramLogService/DeleteTelegramLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramLogServiceServer).DeleteTelegramLog(ctx, req.(*TelegramLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TelegramLogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "consumer_service.TelegramLogService",
	HandlerType: (*TelegramLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTelegramLog",
			Handler:    _TelegramLogService_CreateTelegramLog_Handler,
		},
		{
			MethodName: "GetTelegramLogByID",
			Handler:    _TelegramLogService_GetTelegramLogByID_Handler,
		},
		{
			MethodName: "GetTelegramLogsByStatus",
			Handler:    _TelegramLogService_GetTelegramLogsByStatus_Handler,
		},
		{
			MethodName: "UpdateTelegramLogStatus",
			Handler:    _TelegramLogService_UpdateTelegramLogStatus_Handler,
		},
		{
			MethodName: "UpdateTelegramLog",
			Handler:    _TelegramLogService_UpdateTelegramLog_Handler,
		},
		{
			MethodName: "DeleteTelegramLog",
			Handler:    _TelegramLogService_DeleteTelegramLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "telegram_log_service.proto",
}
