// Code generated by protoc-gen-go. DO NOT EDIT.
// source: geo_service.proto

package geo_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GeozoneId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeozoneId) Reset()         { *m = GeozoneId{} }
func (m *GeozoneId) String() string { return proto.CompactTextString(m) }
func (*GeozoneId) ProtoMessage()    {}
func (*GeozoneId) Descriptor() ([]byte, []int) {
	return fileDescriptor_9825411ede85f3dc, []int{0}
}

func (m *GeozoneId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeozoneId.Unmarshal(m, b)
}
func (m *GeozoneId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeozoneId.Marshal(b, m, deterministic)
}
func (m *GeozoneId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeozoneId.Merge(m, src)
}
func (m *GeozoneId) XXX_Size() int {
	return xxx_messageInfo_GeozoneId.Size(m)
}
func (m *GeozoneId) XXX_DiscardUnknown() {
	xxx_messageInfo_GeozoneId.DiscardUnknown(m)
}

var xxx_messageInfo_GeozoneId proto.InternalMessageInfo

func (m *GeozoneId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetAllGeozonesRequest struct {
	Limit                uint64   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page                 uint64   `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	ShipperId            string   `protobuf:"bytes,3,opt,name=shipper_id,json=shipperId,proto3" json:"shipper_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllGeozonesRequest) Reset()         { *m = GetAllGeozonesRequest{} }
func (m *GetAllGeozonesRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllGeozonesRequest) ProtoMessage()    {}
func (*GetAllGeozonesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9825411ede85f3dc, []int{1}
}

func (m *GetAllGeozonesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllGeozonesRequest.Unmarshal(m, b)
}
func (m *GetAllGeozonesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllGeozonesRequest.Marshal(b, m, deterministic)
}
func (m *GetAllGeozonesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllGeozonesRequest.Merge(m, src)
}
func (m *GetAllGeozonesRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllGeozonesRequest.Size(m)
}
func (m *GetAllGeozonesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllGeozonesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllGeozonesRequest proto.InternalMessageInfo

func (m *GetAllGeozonesRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllGeozonesRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllGeozonesRequest) GetShipperId() string {
	if m != nil {
		return m.ShipperId
	}
	return ""
}

type GetAllGeozonesResponse struct {
	Geozones             []*Geozone `protobuf:"bytes,1,rep,name=geozones,proto3" json:"geozones,omitempty"`
	Count                uint64     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetAllGeozonesResponse) Reset()         { *m = GetAllGeozonesResponse{} }
func (m *GetAllGeozonesResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllGeozonesResponse) ProtoMessage()    {}
func (*GetAllGeozonesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9825411ede85f3dc, []int{2}
}

func (m *GetAllGeozonesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllGeozonesResponse.Unmarshal(m, b)
}
func (m *GetAllGeozonesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllGeozonesResponse.Marshal(b, m, deterministic)
}
func (m *GetAllGeozonesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllGeozonesResponse.Merge(m, src)
}
func (m *GetAllGeozonesResponse) XXX_Size() int {
	return xxx_messageInfo_GetAllGeozonesResponse.Size(m)
}
func (m *GetAllGeozonesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllGeozonesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllGeozonesResponse proto.InternalMessageInfo

func (m *GetAllGeozonesResponse) GetGeozones() []*Geozone {
	if m != nil {
		return m.Geozones
	}
	return nil
}

func (m *GetAllGeozonesResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*GeozoneId)(nil), "genproto.GeozoneId")
	proto.RegisterType((*GetAllGeozonesRequest)(nil), "genproto.GetAllGeozonesRequest")
	proto.RegisterType((*GetAllGeozonesResponse)(nil), "genproto.GetAllGeozonesResponse")
}

func init() { proto.RegisterFile("geo_service.proto", fileDescriptor_9825411ede85f3dc) }

var fileDescriptor_9825411ede85f3dc = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x4d, 0x9b, 0x1a, 0x9a, 0x11, 0x84, 0x8e, 0xb5, 0x84, 0x14, 0xb1, 0xac, 0x97, 0x5e, 0x4c,
	0xa0, 0x22, 0x9e, 0xb5, 0x4a, 0xe8, 0x41, 0x90, 0x88, 0x17, 0x41, 0x6b, 0xdb, 0x8c, 0xe9, 0x62,
	0x9a, 0x8d, 0xc9, 0x56, 0xd0, 0xaf, 0xf0, 0x93, 0xa5, 0xd9, 0x44, 0x8b, 0x69, 0xbd, 0xcd, 0xbc,
	0x79, 0xf3, 0xe6, 0xed, 0x63, 0xa1, 0x15, 0x92, 0x18, 0x67, 0x94, 0xbe, 0xf3, 0x19, 0x39, 0x49,
	0x2a, 0xa4, 0xc0, 0x66, 0x48, 0x71, 0x5e, 0xd9, 0x66, 0x48, 0x42, 0x81, 0x76, 0x37, 0x14, 0x22,
	0x8c, 0xc8, 0xcd, 0xbb, 0xe9, 0xf2, 0xc5, 0xa5, 0x45, 0x22, 0x3f, 0xd4, 0x90, 0x75, 0xc1, 0xf4,
	0x48, 0x7c, 0x8a, 0x98, 0x46, 0x01, 0xee, 0x41, 0x9d, 0x07, 0x56, 0xad, 0x57, 0xeb, 0x9b, 0x7e,
	0x9d, 0x07, 0xec, 0x19, 0x0e, 0x3c, 0x92, 0x17, 0x51, 0x54, 0x50, 0x32, 0x9f, 0xde, 0x96, 0x94,
	0x49, 0x6c, 0xc3, 0x4e, 0xc4, 0x17, 0x5c, 0xe6, 0xdc, 0x86, 0xaf, 0x1a, 0x44, 0x68, 0x24, 0x93,
	0x90, 0xac, 0x7a, 0x0e, 0xe6, 0x35, 0x1e, 0x02, 0x64, 0x73, 0x9e, 0x24, 0x94, 0x8e, 0x79, 0x60,
	0xe9, 0xb9, 0xb4, 0x59, 0x20, 0xa3, 0x80, 0x3d, 0x42, 0xe7, 0xef, 0x85, 0x2c, 0x11, 0x71, 0x46,
	0x78, 0x02, 0xcd, 0xb0, 0xc0, 0xac, 0x5a, 0x4f, 0xef, 0xef, 0x0e, 0x5a, 0x4e, 0xf9, 0x3a, 0xa7,
	0x60, 0xfb, 0x3f, 0x94, 0x95, 0xa3, 0x99, 0x58, 0xc6, 0xb2, 0x38, 0xae, 0x9a, 0xc1, 0x97, 0x0e,
	0xe0, 0x91, 0xb8, 0x53, 0x21, 0xe1, 0x00, 0x8c, 0x61, 0x4a, 0x13, 0x49, 0x58, 0xd5, 0xb2, 0xf7,
	0x2b, 0xd0, 0x28, 0x60, 0x1a, 0x9e, 0x81, 0x71, 0x9f, 0x04, 0x5b, 0x76, 0x3a, 0x8e, 0xca, 0xd6,
	0x29, 0xb3, 0x75, 0xae, 0x57, 0xd9, 0x32, 0x0d, 0x5d, 0xd0, 0x3d, 0x92, 0xb8, 0x49, 0xd4, 0xae,
	0x0a, 0x31, 0x0d, 0x6f, 0xc0, 0x50, 0x49, 0xe0, 0xd1, 0xfa, 0x78, 0x43, 0xfa, 0x76, 0x6f, 0x3b,
	0x41, 0x85, 0xc7, 0x34, 0x3c, 0x07, 0xe3, 0x8a, 0x22, 0x92, 0xb4, 0xd9, 0xc2, 0x76, 0xe3, 0x4f,
	0xd0, 0x1a, 0xce, 0x69, 0xf6, 0x7a, 0x2b, 0x78, 0x2c, 0x8b, 0x05, 0x64, 0xbf, 0x1a, 0x95, 0x61,
	0xe9, 0xea, 0xf8, 0x5f, 0x4e, 0x69, 0xec, 0xb2, 0xf3, 0xd0, 0x2e, 0x79, 0xee, 0xda, 0x07, 0x9e,
	0x1a, 0x39, 0x74, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xa4, 0xa7, 0x14, 0xd6, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GeoServiceClient is the client API for GeoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeoServiceClient interface {
	Create(ctx context.Context, in *Geozone, opts ...grpc.CallOption) (*GeozoneId, error)
	Update(ctx context.Context, in *Geozone, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *GeozoneId, opts ...grpc.CallOption) (*Geozone, error)
	GetAll(ctx context.Context, in *GetAllGeozonesRequest, opts ...grpc.CallOption) (*GetAllGeozonesResponse, error)
	Delete(ctx context.Context, in *GeozoneId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckPointGeozone(ctx context.Context, in *CheckPointGeozoneRequest, opts ...grpc.CallOption) (*CheckPointGeozoneResponse, error)
}

type geoServiceClient struct {
	cc *grpc.ClientConn
}

func NewGeoServiceClient(cc *grpc.ClientConn) GeoServiceClient {
	return &geoServiceClient{cc}
}

func (c *geoServiceClient) Create(ctx context.Context, in *Geozone, opts ...grpc.CallOption) (*GeozoneId, error) {
	out := new(GeozoneId)
	err := c.cc.Invoke(ctx, "/genproto.GeoService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoServiceClient) Update(ctx context.Context, in *Geozone, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.GeoService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoServiceClient) Get(ctx context.Context, in *GeozoneId, opts ...grpc.CallOption) (*Geozone, error) {
	out := new(Geozone)
	err := c.cc.Invoke(ctx, "/genproto.GeoService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoServiceClient) GetAll(ctx context.Context, in *GetAllGeozonesRequest, opts ...grpc.CallOption) (*GetAllGeozonesResponse, error) {
	out := new(GetAllGeozonesResponse)
	err := c.cc.Invoke(ctx, "/genproto.GeoService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoServiceClient) Delete(ctx context.Context, in *GeozoneId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.GeoService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoServiceClient) CheckPointGeozone(ctx context.Context, in *CheckPointGeozoneRequest, opts ...grpc.CallOption) (*CheckPointGeozoneResponse, error) {
	out := new(CheckPointGeozoneResponse)
	err := c.cc.Invoke(ctx, "/genproto.GeoService/CheckPointGeozone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoServiceServer is the server API for GeoService service.
type GeoServiceServer interface {
	Create(context.Context, *Geozone) (*GeozoneId, error)
	Update(context.Context, *Geozone) (*emptypb.Empty, error)
	Get(context.Context, *GeozoneId) (*Geozone, error)
	GetAll(context.Context, *GetAllGeozonesRequest) (*GetAllGeozonesResponse, error)
	Delete(context.Context, *GeozoneId) (*emptypb.Empty, error)
	CheckPointGeozone(context.Context, *CheckPointGeozoneRequest) (*CheckPointGeozoneResponse, error)
}

// UnimplementedGeoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGeoServiceServer struct {
}

func (*UnimplementedGeoServiceServer) Create(ctx context.Context, req *Geozone) (*GeozoneId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedGeoServiceServer) Update(ctx context.Context, req *Geozone) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedGeoServiceServer) Get(ctx context.Context, req *GeozoneId) (*Geozone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedGeoServiceServer) GetAll(ctx context.Context, req *GetAllGeozonesRequest) (*GetAllGeozonesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedGeoServiceServer) Delete(ctx context.Context, req *GeozoneId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedGeoServiceServer) CheckPointGeozone(ctx context.Context, req *CheckPointGeozoneRequest) (*CheckPointGeozoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPointGeozone not implemented")
}

func RegisterGeoServiceServer(s *grpc.Server, srv GeoServiceServer) {
	s.RegisterService(&_GeoService_serviceDesc, srv)
}

func _GeoService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Geozone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GeoService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServiceServer).Create(ctx, req.(*Geozone))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Geozone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GeoService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServiceServer).Update(ctx, req.(*Geozone))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeozoneId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GeoService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServiceServer).Get(ctx, req.(*GeozoneId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGeozonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GeoService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServiceServer).GetAll(ctx, req.(*GetAllGeozonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeozoneId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GeoService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServiceServer).Delete(ctx, req.(*GeozoneId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoService_CheckPointGeozone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPointGeozoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoServiceServer).CheckPointGeozone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.GeoService/CheckPointGeozone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoServiceServer).CheckPointGeozone(ctx, req.(*CheckPointGeozoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.GeoService",
	HandlerType: (*GeoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GeoService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GeoService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GeoService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _GeoService_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GeoService_Delete_Handler,
		},
		{
			MethodName: "CheckPointGeozone",
			Handler:    _GeoService_CheckPointGeozone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geo_service.proto",
}
