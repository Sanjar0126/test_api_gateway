// Code generated by protoc-gen-go. DO NOT EDIT.
// source: permission_service.proto

package auth_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PermissionId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PermissionId) Reset()         { *m = PermissionId{} }
func (m *PermissionId) String() string { return proto.CompactTextString(m) }
func (*PermissionId) ProtoMessage()    {}
func (*PermissionId) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef9903376c2df4a6, []int{0}
}

func (m *PermissionId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PermissionId.Unmarshal(m, b)
}
func (m *PermissionId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PermissionId.Marshal(b, m, deterministic)
}
func (m *PermissionId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionId.Merge(m, src)
}
func (m *PermissionId) XXX_Size() int {
	return xxx_messageInfo_PermissionId.Size(m)
}
func (m *PermissionId) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionId.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionId proto.InternalMessageInfo

func (m *PermissionId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetAllPermissionsRequest struct {
	UserTypeId           string   `protobuf:"bytes,1,opt,name=user_type_id,json=userTypeId,proto3" json:"user_type_id,omitempty"`
	Page                 uint64   `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit                uint64   `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllPermissionsRequest) Reset()         { *m = GetAllPermissionsRequest{} }
func (m *GetAllPermissionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllPermissionsRequest) ProtoMessage()    {}
func (*GetAllPermissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef9903376c2df4a6, []int{1}
}

func (m *GetAllPermissionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllPermissionsRequest.Unmarshal(m, b)
}
func (m *GetAllPermissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllPermissionsRequest.Marshal(b, m, deterministic)
}
func (m *GetAllPermissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllPermissionsRequest.Merge(m, src)
}
func (m *GetAllPermissionsRequest) XXX_Size() int {
	return xxx_messageInfo_GetAllPermissionsRequest.Size(m)
}
func (m *GetAllPermissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllPermissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllPermissionsRequest proto.InternalMessageInfo

func (m *GetAllPermissionsRequest) GetUserTypeId() string {
	if m != nil {
		return m.UserTypeId
	}
	return ""
}

func (m *GetAllPermissionsRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllPermissionsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetAllPermissionsResponse struct {
	Permissions          []*Permission `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Count                uint64        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetAllPermissionsResponse) Reset()         { *m = GetAllPermissionsResponse{} }
func (m *GetAllPermissionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllPermissionsResponse) ProtoMessage()    {}
func (*GetAllPermissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef9903376c2df4a6, []int{2}
}

func (m *GetAllPermissionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllPermissionsResponse.Unmarshal(m, b)
}
func (m *GetAllPermissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllPermissionsResponse.Marshal(b, m, deterministic)
}
func (m *GetAllPermissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllPermissionsResponse.Merge(m, src)
}
func (m *GetAllPermissionsResponse) XXX_Size() int {
	return xxx_messageInfo_GetAllPermissionsResponse.Size(m)
}
func (m *GetAllPermissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllPermissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllPermissionsResponse proto.InternalMessageInfo

func (m *GetAllPermissionsResponse) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *GetAllPermissionsResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*PermissionId)(nil), "genproto.PermissionId")
	proto.RegisterType((*GetAllPermissionsRequest)(nil), "genproto.GetAllPermissionsRequest")
	proto.RegisterType((*GetAllPermissionsResponse)(nil), "genproto.GetAllPermissionsResponse")
}

func init() { proto.RegisterFile("permission_service.proto", fileDescriptor_ef9903376c2df4a6) }

var fileDescriptor_ef9903376c2df4a6 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4f, 0x4b, 0xfb, 0x40,
	0x10, 0x4d, 0xd2, 0xfe, 0xc2, 0xcf, 0x69, 0x11, 0x1c, 0xaa, 0xc6, 0x08, 0x12, 0xd6, 0x4b, 0x4f,
	0x29, 0x54, 0x14, 0xf1, 0xe6, 0x3f, 0x4a, 0x6f, 0x92, 0xea, 0xc5, 0x4b, 0x69, 0x9b, 0x69, 0x5c,
	0x48, 0x93, 0x35, 0xbb, 0x11, 0xfa, 0x29, 0xfd, 0x4a, 0x92, 0xac, 0x69, 0x3c, 0x24, 0xbd, 0xed,
	0xbc, 0x7d, 0x6f, 0x86, 0xf7, 0x78, 0xe0, 0x08, 0xca, 0x36, 0x5c, 0x4a, 0x9e, 0x26, 0x73, 0x49,
	0xd9, 0x17, 0x5f, 0x91, 0x2f, 0xb2, 0x54, 0xa5, 0xf8, 0x3f, 0xa2, 0xa4, 0x7c, 0xb9, 0xb0, 0xc8,
	0xd5, 0x87, 0x46, 0xdd, 0xf3, 0x28, 0x4d, 0xa3, 0x98, 0x46, 0xe5, 0xb4, 0xcc, 0xd7, 0x23, 0xda,
	0x08, 0xb5, 0xd5, 0x9f, 0xec, 0x02, 0xfa, 0x2f, 0xbb, 0x75, 0xd3, 0x10, 0x0f, 0xc1, 0xe2, 0xa1,
	0x63, 0x7a, 0xe6, 0xf0, 0x20, 0xb0, 0x78, 0xc8, 0xd6, 0xe0, 0x4c, 0x48, 0xdd, 0xc7, 0x71, 0xcd,
	0x92, 0x01, 0x7d, 0xe6, 0x24, 0x15, 0x7a, 0xd0, 0xcf, 0x25, 0x65, 0x73, 0xb5, 0x15, 0x34, 0xdf,
	0xa9, 0xa0, 0xc0, 0x5e, 0xb7, 0x82, 0xa6, 0x21, 0x22, 0x74, 0xc5, 0x22, 0x22, 0xc7, 0xf2, 0xcc,
	0x61, 0x37, 0x28, 0xdf, 0x38, 0x80, 0x7f, 0x31, 0xdf, 0x70, 0xe5, 0x74, 0x4a, 0x50, 0x0f, 0x8c,
	0xc3, 0x59, 0xc3, 0x1d, 0x29, 0xd2, 0x44, 0x12, 0xde, 0x40, 0xaf, 0xf6, 0x2c, 0x1d, 0xd3, 0xeb,
	0x0c, 0x7b, 0xe3, 0x81, 0x5f, 0xb9, 0xf5, 0x6b, 0x4d, 0xf0, 0x97, 0x58, 0x9c, 0x5a, 0xa5, 0x79,
	0xa2, 0x7e, 0xef, 0xeb, 0x61, 0xfc, 0x6d, 0xc1, 0x51, 0xad, 0x98, 0xe9, 0x04, 0xf1, 0x16, 0xec,
	0xc7, 0x8c, 0x16, 0x8a, 0xb0, 0x71, 0xb1, 0x7b, 0xd2, 0x84, 0x4e, 0x43, 0x66, 0xe0, 0x35, 0x74,
	0x26, 0xa4, 0xb0, 0x85, 0xe0, 0x36, 0xae, 0x63, 0x06, 0xce, 0xc0, 0xd6, 0x8e, 0x91, 0xd5, 0x8c,
	0xb6, 0xac, 0xdd, 0xcb, 0xbd, 0x1c, 0x9d, 0x13, 0x33, 0x0a, 0x17, 0x6f, 0x22, 0xdc, 0xeb, 0xa2,
	0x2c, 0x83, 0x5f, 0x95, 0xc1, 0x7f, 0x2e, 0xca, 0xc0, 0x0c, 0xbc, 0x03, 0xfb, 0x89, 0x62, 0x52,
	0xd4, 0x6a, 0xa4, 0x55, 0xfb, 0x70, 0xfa, 0x7e, 0x5c, 0x49, 0x46, 0x45, 0xf1, 0xaa, 0x5a, 0x2e,
	0xed, 0x12, 0xbb, 0xfa, 0x09, 0x00, 0x00, 0xff, 0xff, 0x49, 0x1a, 0x2d, 0x7d, 0xb3, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PermissionServiceClient is the client API for PermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PermissionServiceClient interface {
	Create(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*PermissionId, error)
	Get(ctx context.Context, in *PermissionId, opts ...grpc.CallOption) (*Permission, error)
	GetAll(ctx context.Context, in *GetAllPermissionsRequest, opts ...grpc.CallOption) (*GetAllPermissionsResponse, error)
	Update(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *PermissionId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type permissionServiceClient struct {
	cc *grpc.ClientConn
}

func NewPermissionServiceClient(cc *grpc.ClientConn) PermissionServiceClient {
	return &permissionServiceClient{cc}
}

func (c *permissionServiceClient) Create(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*PermissionId, error) {
	out := new(PermissionId)
	err := c.cc.Invoke(ctx, "/genproto.PermissionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) Get(ctx context.Context, in *PermissionId, opts ...grpc.CallOption) (*Permission, error) {
	out := new(Permission)
	err := c.cc.Invoke(ctx, "/genproto.PermissionService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) GetAll(ctx context.Context, in *GetAllPermissionsRequest, opts ...grpc.CallOption) (*GetAllPermissionsResponse, error) {
	out := new(GetAllPermissionsResponse)
	err := c.cc.Invoke(ctx, "/genproto.PermissionService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) Update(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.PermissionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) Delete(ctx context.Context, in *PermissionId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/genproto.PermissionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionServiceServer is the server API for PermissionService service.
type PermissionServiceServer interface {
	Create(context.Context, *Permission) (*PermissionId, error)
	Get(context.Context, *PermissionId) (*Permission, error)
	GetAll(context.Context, *GetAllPermissionsRequest) (*GetAllPermissionsResponse, error)
	Update(context.Context, *Permission) (*emptypb.Empty, error)
	Delete(context.Context, *PermissionId) (*emptypb.Empty, error)
}

// UnimplementedPermissionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPermissionServiceServer struct {
}

func (*UnimplementedPermissionServiceServer) Create(ctx context.Context, req *Permission) (*PermissionId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedPermissionServiceServer) Get(ctx context.Context, req *PermissionId) (*Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedPermissionServiceServer) GetAll(ctx context.Context, req *GetAllPermissionsRequest) (*GetAllPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedPermissionServiceServer) Update(ctx context.Context, req *Permission) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedPermissionServiceServer) Delete(ctx context.Context, req *PermissionId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterPermissionServiceServer(s *grpc.Server, srv PermissionServiceServer) {
	s.RegisterService(&_PermissionService_serviceDesc, srv)
}

func _PermissionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.PermissionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).Create(ctx, req.(*Permission))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.PermissionService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).Get(ctx, req.(*PermissionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.PermissionService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GetAll(ctx, req.(*GetAllPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.PermissionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).Update(ctx, req.(*Permission))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.PermissionService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).Delete(ctx, req.(*PermissionId))
	}
	return interceptor(ctx, in, info, handler)
}

var _PermissionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.PermissionService",
	HandlerType: (*PermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PermissionService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PermissionService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _PermissionService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PermissionService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PermissionService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "permission_service.proto",
}
